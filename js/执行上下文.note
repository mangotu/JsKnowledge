 执行栈

## 1 js执行顺序
    变量提升 (提前声明且变量未赋值/undefined)
    函数提升 (整个函数体的提升)

## 2 可执行的代码类型
    全局上下文 : 只有一个，浏览器中的全局对象就是 window 对象，this 指向这个全局对象。
    函数代码块 : 存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。
    eval函数执行 : 指的是运行在 eval 函数中的代码，很少用而且不建议使用。
    
## 3 执行栈
    ESCStack 执行栈 先进后出
    假设这是a.js文件
    
        //这是一个
        var a = 1
        fn(){
            console.log(111)
        }
        fn();
    
    //分割线-------------------------------------------------
    
    模拟执行栈过程:
        //执行栈
        var ESCstack = [];
        //全局上下文先进栈;
        ESCstack.push('globaContext') 
        //ESCstack = ['globaContext']
        //调用fn函数; 当执行一个函数的时候，就会创建一个对应的执行上下文，并且加入执行上下文栈
        ESCstack.push('fn');
         //ESCstack = ['globaContext','fn']
        //调用结束; 当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出。
        ESCstack.pop('fn');
         //ESCstack = ['globaContext']
        //剩下全局上下文
        
        总结:
        JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，我们用 globalContext 表示它，并且只有当整个应用程序结束的时候，ECStack 才会被清空，所以程序结束之前， ECStack 最底部永远有个 globalContext
        

## 4 深入变量对象
    当 JS 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。
    
    对于每个执行上下文，都有三个重要属性：
    
        . 变量对象(Variable object，VO)
        . 作用域链(Scope chain)
        . this
        
 
    变量对象：与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。    
    因为不同执行上下文下的变量对象稍有不同，所以我们来聊聊全局上下文下的变量对象和函数上下文下的变量对象。


#### 全局对象

    全局上下文中的变量对象就是全局对象  ( windows） 
    
#### 函数对象    

    在函数上下文中，我们用活动对象(activation object, AO)来表示变量对象。